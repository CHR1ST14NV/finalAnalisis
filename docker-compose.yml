services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-chan}
      POSTGRES_USER: ${DB_USER:-chan}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-chan}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 10

  db-backup:
    image: prodrigestivill/postgres-backup-local:16
    restart: unless-stopped
    depends_on:
      - db
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${DB_NAME:-chan}
      POSTGRES_USER: ${DB_USER:-chan}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-chan}
      SCHEDULE: "0 3 * * *" # diario 03:00
      BACKUP_KEEP_DAYS: 7
      BACKUP_DIR: /backups
    volumes:
      - ./backups:/backups

  redis:
    image: redis:7
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  minio:
    image: minio/minio:RELEASE.2024-08-03T04-33-23Z
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - "9001:9001"
    volumes:
      - miniostore:/data

  web:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - OTEL_SERVICE_NAME=chan-platform-web
      - OTEL_TRACES_EXPORTER=otlp
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
    expose:
      - "8000"
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    environment:
      - NODE_ENV=production
    depends_on:
      - web
    expose:
      - "3000"
    restart: unless-stopped

  celery-worker:
    build:
      context: .
      dockerfile: docker/celery.Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - OTEL_SERVICE_NAME=chan-platform-worker
      - OTEL_TRACES_EXPORTER=otlp
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
    command: bash -lc "celery -A chan_platform worker -l info"
    restart: unless-stopped

  celery-beat:
    build:
      context: .
      dockerfile: docker/celery.Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - OTEL_SERVICE_NAME=chan-platform-beat
      - OTEL_TRACES_EXPORTER=otlp
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
    command: bash -lc "bash scripts/wait_for_db.sh ${DB_HOST:-db} ${DB_USER:-chan} && python manage.py makemigrations --noinput && python manage.py migrate && celery -A chan_platform beat -l info"
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector:0.102.1
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "4317:4317"

  prometheus:
    image: prom/prometheus:v2.54.1
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:10.4.7
    restart: unless-stopped
    environment:
      GF_SERVER_ROOT_URL: http://localhost:3000/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      - web
      - frontend
      - grafana
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/app.conf:ro
      - .:/app
    ports:
      - "3000:3000"

volumes:
  pgdata:
  redisdata:
  miniostore:
  grafana-storage:
